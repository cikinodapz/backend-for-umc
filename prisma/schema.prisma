// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * * ENUMS **
 */
enum Role {
  ADMIN
  PEMINJAM
}

enum UserStatus {
  AKTIF
  NONAKTIF
}

enum Condition {
  BAIK
  RUSAK_RINGAN
  RUSAK_BERAT
  HILANG
}

enum AssetStatus {
  TERSEDIA
  DIPINJAM
  TIDAK_AKTIF
}

enum ItemType {
  ASET
  JASA
}

enum BookingType {
  ASET
  JASA
  CAMPUR
}

enum BookingStatus {
  MENUNGGU
  DIKONFIRMASI
  DITOLAK
  DIBATALKAN
  SELESAI
}

enum PaymentMethod {
  CASH
  TRANSFER
  QRIS
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum FineType {
  TELAT
  KERUSAKAN
  KEHILANGAN
  LAINNYA
}

enum NotificationChannel {
  EMAIL
  WA
  APP
}

enum NotificationType {
  BOOKING
  PAYMENT
  RETURN
  SYSTEM
}

enum CategoryType {
  ASET
  JASA
}

/**
 * * MODELS **
 */
model User {
  id           String      @id @default(uuid()) @db.Uuid
  name         String
  email        String      @unique
  phone        String?
  photoUrl     String?
  passwordHash String
  role         Role        @default(PEMINJAM)
  status       UserStatus  @default(AKTIF)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  bookings  Booking[]
  approvals Booking[]  @relation("Approval")
  feedbacks Feedback[]
  notifs    Notification[]

  Cart Cart[]

  PasswordReset PasswordReset[]
}

model Category {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  description String?
  type        CategoryType?
  assets      Asset[]
  services    Service[]
}

model Asset {
  id              String      @id @default(uuid()) @db.Uuid
  categoryId      String?     @db.Uuid
  code            String      @unique
  name            String
  specification   String?
  acquisitionDate DateTime?
  conditionNow    Condition   @default(BAIK)
  status          AssetStatus @default(TERSEDIA)
  dailyRate       Decimal     @default("0") @db.Decimal(12, 2)
  stock           Int         @default(1)
  photoUrl        String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  category     Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  bookingItems BookingItem[]

  @@index([categoryId], map: "idx_assets_category")
  Cart Cart[]
}

model Service {
  id          String   @id @default(uuid()) @db.Uuid
  categoryId  String?  @db.Uuid
  name        String
  description String?
  unitRate    Decimal  @default("0") @db.Decimal(12, 2)
  isActive    Boolean  @default(true)
  photoUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category     Category?     @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  bookingItems BookingItem[]

  @@index([categoryId], map: "idx_services_category")
  Cart Cart[]
  Package Package[]
}

model Package {
  id          String   @id @default(uuid()) @db.Uuid
  serviceId   String   @db.Uuid
  name        String
  description String?
  unitRate    Decimal  @db.Decimal(12, 2)
  features    Json?    // ðŸ†• daftar fitur paket (bullet list)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  service     Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([serviceId], map: "idx_packages_service")
  Cart Cart[]
  BookingItem BookingItem[]
}

model Cart {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  serviceId   String?  @db.Uuid
  packageId   String?  @db.Uuid
  quantity    Int      @default(1)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  package Package? @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Ubah constraint unique untuk handle packageId yang null
  @@unique([userId, serviceId, packageId], map: "uq_cart_item")
  @@index([userId], map: "idx_cart_user")
  
  // Hapus Asset[] karena tidak sesuai dengan relasi
  Asset Asset[]
}

model Booking {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String        @db.Uuid
  approvalId  String?       @db.Uuid  // Admin yang approve
  type        BookingType   @default(JASA)
  status      BookingStatus @default(MENUNGGU)
  startDate   DateTime?
  endDate     DateTime?
  totalAmount Decimal       @default("0") @db.Decimal(12, 2)
  notes       String?       // Notes keseluruhan untuk booking
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  approval  User?         @relation("Approval", fields: [approvalId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  items     BookingItem[]
  payments  Payment[]
  feedbacks Feedback[]

  @@index([userId], map: "idx_bookings_user")
  @@index([approvalId], map: "idx_bookings_approval")
}

model BookingItem {
  id          String   @id @default(uuid()) @db.Uuid
  bookingId   String   @db.Uuid
  type        ItemType @default(JASA)
  assetId     String?  @db.Uuid
  serviceId   String?  @db.Uuid
  packageId   String?  @db.Uuid
  quantity    Int      @default(1)
  unitPrice   Decimal?  @db.Decimal(12, 2)
  subtotal    Decimal?  @db.Decimal(12, 2)
  notes       String?  // Notes per item, bisa diambil dari cart jika dari cart
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt

  booking Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  asset   Asset?   @relation(fields: [assetId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  service Service? @relation(fields: [serviceId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  package Package? @relation(fields: [packageId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([bookingId], map: "idx_booking_items_booking")
  @@index([assetId], map: "idx_booking_items_asset")
  @@index([serviceId], map: "idx_booking_items_service")
  @@index([packageId], map: "idx_booking_items_package")
}

model Payment {
  id          String        @id @default(uuid()) @db.Uuid
  bookingId   String        @db.Uuid
  amount      Decimal       @db.Decimal(12, 2)
  method      PaymentMethod
  status      PaymentStatus @default(PENDING)
  paidAt      DateTime?
  referenceNo String?
  proofUrl    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([bookingId], map: "idx_payments_booking")
}

model Feedback {
  id        String   @id @default(uuid()) @db.Uuid
  bookingId String   @db.Uuid
  userId    String   @db.Uuid
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Notification {
  id      String              @id @default(uuid()) @db.Uuid
  userId  String              @db.Uuid
  channel NotificationChannel @default(APP)
  type    NotificationType
  title   String
  body    String?
  sentAt  DateTime            @default(now())
  readAt  DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

/// Reset password OTP store
model PasswordReset {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  email      String
  otpHash    String   // hashed OTP
  expiresAt  DateTime
  usedAt     DateTime?
  createdAt  DateTime @default(now())
  attempts   Int      @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([email], map: "idx_passwordreset_email")
  @@index([userId], map: "idx_passwordreset_user")
}
